{"version":3,"sources":["components/GifCard/GifCard.js","helpers/getGifs.js","components/GifGrid/GifGrid.js","hooks/useFetchGifs.js","components/AddCategory/AddCategory.js","GifExpertApp.js","index.js"],"names":["GifCard","image","title","url","tooltipEl","useRef","clipboard","useClipboard","copyToClipboard","useCallback","copy","current","hidden","setTimeout","className","ref","target","value","readOnly","src","alt","onClick","xmlns","fill","viewBox","stroke","d","strokeLinecap","strokeLinejoin","strokeWidth","getGifs","category","a","encodeURI","fetch","res","json","data","map","img","id","images","downsized_medium","GifGrid","useState","loading","state","setState","useEffect","then","useFetchGifs","key","AddCategory","updateCategories","inputValue","setInputValue","onSubmit","e","preventDefault","prevStateCategories","type","placeholder","onChange","required","autoComplete","GifExpertApp","categories","setCategories","window","location","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb61e1c9.chunk.js","sourcesContent":["import React, { useCallback, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useClipboard } from 'use-clipboard-copy';\r\n\r\nfunction GifCard({ image: { title, url } }) {\r\n  const tooltipEl = useRef();\r\n  const clipboard = useClipboard();\r\n\r\n  const copyToClipboard = useCallback(() => {\r\n    clipboard.copy(url);\r\n    tooltipEl.current.hidden = false;\r\n    setTimeout(() => tooltipEl.current.hidden = true, 500);\r\n  }, [clipboard, url]);\r\n\r\n  return (\r\n    <div\r\n      className=\"image bg-white rounded-lg flex-wrap shadow-lg overflow-hidden transform motion-safe:hover:-translate-y-1 motion-safe:hover:scale-110 transition ease-in-out duration-300\r\n      animate__animated animate__fadeIn\">\r\n      <input ref={ clipboard.target } value={ url } readOnly hidden/>\r\n      <img src={ url } className=\"h-48 w-full\" alt=\"\"\r\n           title={ title }/>\r\n      <span className=\"flex justify-center p-2 text-gray-700 text-sm inline-block w-full cursor-pointer tooltip\"\r\n            onClick={ copyToClipboard }>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" className=\"h-6 w-6 text-gray-500 text-center\"\r\n             viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          <path\r\n            d=\"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        </svg> Copy\r\n        <span className='tooltip-text bg-gray-400 p-3 -mt-6 -ml-7 rounded text-base'\r\n              ref={ tooltipEl }\r\n              hidden\r\n        >Copied!</span>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nGifCard.propTypes = {\r\n  image: PropTypes.object.isRequired\r\n};\r\n\r\nexport default GifCard;","export const getGifs = async category => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=SoMXF2RPOmSnZhju04jYCMiM12k08RTb`;\r\n  const res = await fetch(url);\r\n  const { data } = await res.json();\r\n  return data.map(img => ({\r\n    id: img.id,\r\n    title: img.title,\r\n    url: img.images?.downsized_medium.url\r\n  }));\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GifCard from \"../GifCard\";\r\nimport { useFetchGifs } from \"../../hooks/useFetchGifs\";\r\n\r\nfunction GifGrid({ category }) {\r\n  const { loading, images } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      { loading &&\r\n      <div className=\"flex justify-center\">\r\n        <div className=\"ellipsis\"><div/><div/><div/><div/></div>\r\n      </div>\r\n      }\r\n      <div className=\"images grid grid-cols-1 md:grid-cols-6 gap-8 mb-3\">\r\n        {\r\n          images.map(image => <GifCard key={ image.id } image={ image }/>)\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GifGrid;","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = category => {\r\n  const [state, setState] = useState({\r\n    images: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then(images => setTimeout(() => setState({ images, loading: false }), 2000));\r\n  }, [category]);\r\n\r\n  return state;\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AddCategory({ updateCategories }) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputValue = e => setInputValue(e.target.value);\r\n\r\n  const handleSubmitCategory = e => {\r\n    e.preventDefault();\r\n    updateCategories(prevStateCategories => [inputValue, ...prevStateCategories]);\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmitCategory }>\r\n      <div className=\"relative text-gray-600 focus-within:text-gray-400\">\r\n      <span className=\"absolute inset-y-0 left-0 flex items-center pl-2\">\r\n        <button type=\"submit\" className=\"p-1 focus:outline-none focus:shadow-outline\">\r\n          <svg fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"\r\n               viewBox=\"0 0 24 24\" className=\"w-6 h-6\">\r\n            <path d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"/>\r\n          </svg>\r\n        </button>\r\n      </span>\r\n        <input type=\"search\"\r\n               className=\"py-2 text-sm text-white bg-gray-300 rounded-md pl-10 pr-2 w-full focus:outline-none focus:bg-white focus:text-gray-900\"\r\n               placeholder=\"Search...\"\r\n               value={ inputValue }\r\n               onChange={ handleInputValue }\r\n               required\r\n               autoComplete=\"off\"/>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  updateCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","import React, { useState } from 'react';\nimport { AddCategory, GifGrid } from \"./components\";\n\nfunction GifExpertApp() {\n  const [categories, setCategories] = useState(['Rick and Morty']);\n\n  return (\n    <>\n      <div className=\"flex justify-center p-16 pt-10\">\n        <div className=\"mt-2 w-128\">\n          <img src={ `${window.location}/app-logo.png` } alt=\"Gif Expert logo\"/>\n          <AddCategory updateCategories={ setCategories }/>\n        </div>\n      </div>\n      <div className=\"main-images mb-8 mx-5\">\n        <ol>\n          {\n            categories.map(category => <GifGrid key={category} category={category}/>)\n          }\n        </ol>\n      </div>\n    </>\n  );\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/tailwind.bundle.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}